[{"name":"server.R","content":"source(\"linkage.R\")\n\n# Define server logic\nserver <- function(input, output, session) {\n  \n  # Reactive values to store simulation state\n  sim_data <- reactiveValues(\n    results = NULL,\n    current_gen = 2,  # Start at generation 2 in code\n    max_gen = 11,     # Up to generation 11 in code\n    initialized = FALSE\n  )\n  \n  # Warning message for invalid Student ID\n  output$warningMsg <- renderText({\n    student_id <- as.character(input$studentID)\n    if (nchar(student_id) != 7) {\n      return(\"Warning: Student ID must be exactly 7 digits!\")\n    }\n    return(\"\")\n  })\n  \n  # Generation counter (showing one less than actual)\n  output$genCounter <- renderText({\n    if (sim_data$initialized) {\n      display_gen <- sim_data$current_gen - 1\n      return(paste(\"Current Generation:\", display_gen))\n    } else {\n      return(\"Simulation not initialized\")\n    }\n  })\n  \n  # Initialize simulation\n  observeEvent(input$initBtn, {\n    student_id <- as.character(input$studentID)\n    \n    if (nchar(student_id) != 7) {\n      showModal(modalDialog(\n        title = \"Invalid Student ID\",\n        \"Please enter exactly 7 digits for Student ID.\",\n        easyClose = TRUE\n      ))\n      return()\n    }\n    \n    # Convert to numeric for the seed\n    numeric_id <- as.numeric(student_id)\n    \n    withProgress(message = 'Initializing simulation...', value = 0, {\n      # Run simulation with default parameters\n      sim_data$results <- get_gens(\n        StudentID = numeric_id,\n        tmax = 12,  # We need up to generation 12 (index 2-12)\n        NN = 500,\n        rs = 0.2\n      )\n      sim_data$current_gen <- 2  # Start at generation 2 in code\n      sim_data$initialized <- TRUE\n    })\n  })\n  \n  # Next generation\n  observeEvent(input$nextBtn, {\n    if (!sim_data$initialized) {\n      showModal(modalDialog(\n        title = \"Simulation Not Initialized\",\n        \"Please initialize the simulation first.\",\n        easyClose = TRUE\n      ))\n      return()\n    }\n    \n    if (sim_data$current_gen < sim_data$max_gen) {\n      sim_data$current_gen <- sim_data$current_gen + 1\n    } else {\n      showModal(modalDialog(\n        title = \"Maximum Generation Reached\",\n        \"You have reached the maximum of 10 generations. Click 'Reset' to start over.\",\n        easyClose = TRUE\n      ))\n    }\n  })\n  \n  # Reset to generation 2 in code (display as generation 1)\n  observeEvent(input$resetBtn, {\n    if (sim_data$initialized) {\n      sim_data$current_gen <- 2\n    }\n  })\n  \n  # Fish plot\n  output$fishPlot <- renderPlot({\n    if (!sim_data$initialized) {\n      # Show empty plot with instructions\n      grid.newpage()\n      grid.text(\"Please initialize the simulation to see the fish display\", \n                x = 0.5, y = 0.5, gp = gpar(fontsize = 16))\n      return()\n    }\n    \n    # Get current generation CTB data\n    current_ctb <- sim_data$results$CTB[[sim_data$current_gen]]\n    \n    # Create 4x4 grid for 16 fish\n    grid.newpage()\n    \n    # Define positions for 16 fish in a 4x4 grid\n    x_pos <- rep(seq(0.2, 0.8, length.out = 4), each = 4)\n    y_pos <- rep(seq(0.8, 0.2, length.out = 4), times = 4)\n    \n    # Draw all 16 fish with larger size\n    for (i in 1:16) {\n      chromosome_type <- names(current_ctb)[i]\n      count <- current_ctb[i]\n      draw_fish(x_pos[i], y_pos[i], size = 1.3, label = chromosome_type, count = count)\n    }\n    \n    # Add title with generation info (showing one less than actual)\n    display_gen <- sim_data$current_gen - 1\n    grid.text(paste(\"Generation\", display_gen, \"- Chromosome Frequencies\"),\n              x = 0.5, y = 0.95, gp = gpar(fontsize = 16, fontface = \"bold\"))\n  })\n}","type":"text"},{"name":"ui.R","content":"library(shiny)\nlibrary(grid)\n\n\n# modules keep things tidy and reduce server load\nsource(\"linkage.R\");\n\n# Define UI\nui <- fluidPage(\n  titlePanel(\"Genetic Linkage Simulation - Fish Display\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"studentID\", \"Student ID (7 digits):\", \n                   value = 1234567, min = 1000000, max = 9999999),\n      helpText(\"Please enter exactly 7 digits\"),\n      br(),\n      actionButton(\"initBtn\", \"Initialise Simulation\"),\n      actionButton(\"nextBtn\", \"Next Generation\"),\n      actionButton(\"resetBtn\", \"Reset\"),\n      br(), br(),\n      textOutput(\"genCounter\"),\n      textOutput(\"warningMsg\"),\n      br(),\n      helpText(\"Instructions:\"),\n      helpText(\"1. Enter your 7-digit Student ID\"),\n      helpText(\"2. Click 'Initialise Simulation' to start\"),\n      helpText(\"3. Click 'Next Generation' to advance (max 10 generations)\"),\n      helpText(\"4. Click 'Reset' to go back to generation 1\")\n    ),\n    mainPanel(\n      plotOutput(\"fishPlot\", height = \"600px\")\n    )\n  )\n)\n","type":"text"},{"name":"linkage.R","content":"library(shiny)\nlibrary(grid)\n\nmake_chromosomes <- function(Chr1, Chr2){\n  Nin <- dim(Chr1)[1];\n  hp1 <- Chr1;\n  hp2 <- Chr2;\n  Aal <- which(hp1[,1] == 0);\n  aal <- which(hp1[,1] == 1);\n  Bal <- which(hp1[,2] == 0);\n  bal <- which(hp1[,2] == 1);\n  Cal <- which(hp1[,3] == 0);\n  cal <- which(hp1[,3] == 1);\n  Dal <- which(hp1[,4] == 0);\n  dal <- which(hp1[,4] == 1);\n  \n  hp1[Aal, 1] <- \"A\";\n  hp1[aal, 1] <- \"a\";\n  hp1[Bal, 2] <- \"B\";\n  hp1[bal, 2] <- \"b\";\n  hp1[Cal, 3] <- \"C\";\n  hp1[cal, 3] <- \"c\";\n  hp1[Dal, 4] <- \"D\";\n  hp1[dal, 4] <- \"d\";\n  \n  Aal <- which(hp2[,1] == 0);\n  aal <- which(hp2[,1] == 1);\n  Bal <- which(hp2[,2] == 0);\n  bal <- which(hp2[,2] == 1);\n  Cal <- which(hp2[,3] == 0);\n  cal <- which(hp2[,3] == 1);\n  Dal <- which(hp2[,4] == 0);\n  dal <- which(hp2[,4] == 1);\n  \n  hp2[Aal, 1] <- \"A\";\n  hp2[aal, 1] <- \"a\";\n  hp2[Bal, 2] <- \"B\";\n  hp2[bal, 2] <- \"b\";\n  hp2[Cal, 3] <- \"C\";\n  hp2[cal, 3] <- \"c\";\n  hp2[Dal, 4] <- \"D\";\n  hp2[dal, 4] <- \"d\";\n  \n  Chromosome_1 <- rep(x = NA, times = Nin);\n  Chromosome_2 <- rep(x = NA, times = Nin);\n  \n  for(i in 1:Nin){\n    Chromosome_1[i] <- paste(hp1[i,], collapse = \"\");\n    Chromosome_2[i] <- paste(hp2[i,], collapse = \"\");\n  }  \n  \n  return(list(Chromosome_1, Chromosome_2));\n  \n}\n\nget_DD <- function(Chr1, Chr2, Lnk, NN){\n  ln1  <- Lnk[1];\n  ln2  <- Lnk[2];\n  Haps <- rbind(Chr1, Chr2);\n  g00  <- sum(Haps[, ln1] == 0 & Haps[, ln2] == 0) / (2 * NN);\n  g01  <- sum(Haps[, ln1] == 0 & Haps[, ln2] == 1) / (2 * NN);\n  g10  <- sum(Haps[, ln1] == 1 & Haps[, ln2] == 0) / (2 * NN);\n  g11  <- sum(Haps[, ln1] == 1 & Haps[, ln2] == 1) / (2 * NN);\n  DD   <- (g00*g11) - (g01*g10);\n  return(DD);\n}\n\n\ninitialise_inds <- function(NN = 20, Lnk = 1:2){\n  FrA <- runif(n = 1, min = 0.4, max = 0.6);\n  Fra <- 1 - FrA;\n  FrB <- runif(n = 1, min = 0.4, max = 0.6);\n  Frb <- 1 - FrB;\n  FrC <- runif(n = 1, min = 0.4, max = 0.6);\n  Frc <- 1 - FrC;\n  FrD <- runif(n = 1, min = 0.4, max = 0.6);\n  Frd <- 1 - FrD;\n  MTT <- matrix(data = 0, nrow = NN, ncol = 8);\n  for(i in 1:NN){\n    samp_A    <- rbinom(n = 1, size = 1, prob = FrA);\n    samp_B    <- rbinom(n = 1, size = 1, prob = FrB);\n    samp_C    <- rbinom(n = 1, size = 1, prob = FrC);\n    samp_D    <- rbinom(n = 1, size = 1, prob = FrD);\n    MTT[i, 1] <- samp_A;\n    MTT[i, 2] <- 1 - samp_A;\n    MTT[i, 3] <- samp_B;\n    MTT[i, 4] <- 1 - samp_B;\n    MTT[i, 5] <- samp_C;\n    MTT[i, 6] <- 1 - samp_C; \n    MTT[i, 7] <- samp_D;\n    MTT[i, 8] <- 1 - samp_D;\n  }\n  ## Nevermind, do it this way\n  half_len <- floor(NN / 2);\n  all_vals <- c(rep(x = 0, times = half_len), rep(x = 1, times = half_len));\n  for(i in 1:8){\n    MTT[,i] <- sample(x = all_vals, size = NN, replace = FALSE);\n  }\n  \n  ###\n  ln1  <- Lnk[1];\n  ln2  <- Lnk[2];\n  pos1 <- (2 * ln1) - 1;\n  pos2 <- (2 * ln2) - 1;\n  tbl1 <- table(MTT[, pos1])\n  tbl2 <- table(MTT[, pos2])\n  mxn1 <- names(which(tbl1 == max(tbl1))[1]);\n  mxn2 <- names(which(tbl2 == max(tbl2))[1]);\n  mxv1 <- as.numeric(mxn1);\n  mxv2 <- as.numeric(mxn2);\n  tms1 <- as.numeric(tbl1[mxv1 + 1]);\n  tms2 <- as.numeric(tbl2[mxv2 + 1]);\n  \n  new1         <- rep(x = (mxv1 - 1)*(mxv1 - 1), times = NN); \n  new1[1:tms1] <- mxv1;\n  new2         <- rep(x = (mxv2 - 1)*(mxv2 - 1), times = NN);\n  new2[1:tms2] <- mxv2;\n  \n  MTT[, pos1] <- new1;\n  MTT[, pos2] <- new2;\n  \n  for(i in 1:NN){\n    MTT[i, pos1 + 1] <- 0;\n    if(MTT[i, pos1] == 0){\n      MTT[i, pos1 + 1] <- 1;\n    }\n    MTT[i, pos2 + 1] <- 0;\n    if(MTT[i, pos2] == 0){\n      MTT[i, pos2 + 1] <- 1;\n    }\n  }\n  \n  Chr1 <- MTT[, c(1, 3, 5, 7)];\n  Chr2 <- MTT[, c(2, 4, 6, 8)];\n  \n  DD   <- get_DD(Chr1, Chr2, Lnk, NN);\n  \n  Crms <- make_chromosomes(Chr1, Chr2);\n  \n  Cha1 <- Crms[[1]];\n  Cha2 <- Crms[[2]];\n  \n  return(list(Lnk, MTT, Chr1, Chr2, Cha1, Cha2, DD));\n}\n\nswap_N_Cs <- function(NN, rval, N_C1, N_C2, Lnk){\n  swaps                <- floor(NN * rval);\n  swapit               <- sample(x = 1:NN, size = swaps, replace = FALSE);\n  tmp_C1               <- N_C1[swapit, Lnk[1]];\n  N_C1[swapit, Lnk[2]] <- N_C2[swapit, Lnk[2]];\n  N_C2[swapit, Lnk[2]] <- tmp_C1;\n  return(list(N_C1, N_C2));\n}\n\nmake_new <- function(Lnk, NN, rval, Chr1, Chr2, N_C1, N_C2){\n  Ulnk <- which(1:4 %in% Lnk == FALSE);\n  for(i in 1:NN){\n    parents    <- sample(x = 1:NN, size = 2, replace = FALSE);\n    for(j in Ulnk){\n      p_start <- sample(x = 1:4, size = 1, replace = FALSE);\n      if(p_start == 1){\n        N_C1[i, j] <- Chr1[parents[1], j];\n        N_C2[i, j] <- Chr1[parents[2], j];\n      }\n      if(p_start == 2){\n        N_C1[i, j] <- Chr1[parents[1], j];\n        N_C2[i, j] <- Chr2[parents[2], j];\n      }\n      if(p_start == 3){\n        N_C1[i, j] <- Chr2[parents[1], j];\n        N_C2[i, j] <- Chr1[parents[2], j];\n      }\n      if(p_start == 4){\n        N_C1[i, j] <- Chr2[parents[1], j];\n        N_C2[i, j] <- Chr2[parents[2], j];\n      }\n    }\n    \n    p_start <- sample(x = 1:4, size = 1, replace = FALSE);\n    if(p_start == 1){\n      N_C1[i, Lnk] <- Chr1[parents[1], Lnk];\n      N_C2[i, Lnk] <- Chr1[parents[2], Lnk];\n    }\n    if(p_start == 2){\n      N_C1[i, Lnk] <- Chr1[parents[1], Lnk];\n      N_C2[i, Lnk] <- Chr2[parents[2], Lnk];\n    }\n    if(p_start == 3){\n      N_C1[i, Lnk] <- Chr2[parents[1], Lnk];\n      N_C2[i, Lnk] <- Chr1[parents[2], Lnk];\n    }\n    if(p_start == 4){\n      N_C1[i, Lnk] <- Chr2[parents[1], Lnk];\n      N_C2[i, Lnk] <- Chr2[parents[2], Lnk];\n    }  \n    \n  }\n  recomb_NCs <- swap_N_Cs(NN, rval, N_C1, N_C2, Lnk);\n  return(list(recomb_NCs[[1]], recomb_NCs[[2]]));\n}\n\nchromsome_table <- function(CHR){\n  \n  CHR_tabl  <- table(CHR);\n  \n  chr_names <- c(\"ABCD\", \"ABCd\", \"ABcD\", \"ABcd\", \"AbCD\", \n                 \"AbCd\", \"AbcD\", \"Abcd\", \"aBCD\", \"aBCd\", \"aBcD\", \n                 \"aBcd\", \"abCD\", \"abCd\", \"abcD\", \"abcd\");\n  \n  CHR_head  <- names(CHR_tabl);\n  CHR_N     <- length(CHR_head);\n  \n  full_tbl  <- rep(x = 0, times = length(chr_names));\n  \n  for(i in 1:CHR_N){\n    loc           <- which(chr_names == CHR_head[i]);\n    full_tbl[loc] <-as.numeric(CHR_tabl[i]);\n  }\n  names(full_tbl) <- chr_names;\n  \n  return(full_tbl);\n}\n\nget_gens <- function(StudentID, tmax = 20, NN = 500, rs = 0.2){\n  \n  set.seed(StudentID);\n  \n  rval      <- rs; \n  Lnk       <- sample(x = 1:4, size = 2, replace = FALSE);\n  \n  ini       <- initialise_inds(NN = NN, Lnk = Lnk);\n  N_C1      <- ini[[3]];\n  N_C2      <- ini[[4]];\n  \n  CHR       <- NULL;\n  DD        <- NULL;\n  CTB       <- NULL;\n  RST       <- NULL;\n  CHR[[1]]  <- c(ini[[5]], ini[[6]]);\n  DD[[1]]   <- ini[[7]][[1]];\n  CTB[[1]]  <- chromsome_table(CHR[[1]]);\n  RST[[1]]  <- NA;\n  \n  ts   <- 1;\n  while(ts < tmax){\n    chrs      <- make_new(Lnk = Lnk, NN = NN, rval = rval, \n                          Chr1 = N_C1, Chr2 = N_C2, N_C1 = N_C1,\n                          N_C2 = N_C2);\n    N_C1      <- chrs[[1]];\n    N_C2      <- chrs[[2]];\n    CCC       <- make_chromosomes(N_C1, N_C2);\n    ts        <- ts + 1;\n    \n    DD[[ts]]  <- get_DD(N_C1, N_C2, Lnk, NN);\n    CHR[[ts]] <- c(CCC[[1]], CCC[[2]]);  \n    CTB[[ts]] <- chromsome_table(CHR[[ts]]);\n    RST[[ts]] <- 1 - (DD[[ts]] / DD[[ts - 1]]);\n  }\n  return(list(DD = DD, CHR = CHR, CTB = CTB, RST = RST));  \n}\n\n# Function to draw a simple fish with flipped tail\ndraw_fish <- function(x, y, size = 1, label, count) {\n  # Fish body (circle) - made larger\n  grid.circle(x = x, y = y, r = 0.04 * size,\n              gp = gpar(fill = \"lightblue\", col = \"black\"))\n  \n  # Fish tail (triangle flipped horizontally - wide part at back)\n  x_tail <- c(x + 0.03 * size, x + 0.06 * size, x + 0.03 * size)\n  y_tail <- c(y - 0.025 * size, y, y + 0.025 * size)\n  grid.polygon(x_tail, y_tail, gp = gpar(fill = \"orange\", col = \"black\"))\n  \n  # Fish eye\n  grid.circle(x = x - 0.02 * size, y = y + 0.02 * size, r = 0.007 * size,\n              gp = gpar(fill = \"black\"))\n  \n  # Label inside fish - larger font\n  grid.text(label, x = x, y = y, gp = gpar(fontsize = 12, fontface = \"bold\"))\n  \n  # Count below fish - larger font\n  grid.text(count, x = x, y = y - 0.05 * size, gp = gpar(fontsize = 11))\n}\n","type":"text"},{"name":"shinyQ1A.R","content":"library(shiny)\nlibrary(grid)\n\nmake_chromosomes <- function(Chr1, Chr2){\n  Nin <- dim(Chr1)[1];\n  hp1 <- Chr1;\n  hp2 <- Chr2;\n  Aal <- which(hp1[,1] == 0);\n  aal <- which(hp1[,1] == 1);\n  Bal <- which(hp1[,2] == 0);\n  bal <- which(hp1[,2] == 1);\n  Cal <- which(hp1[,3] == 0);\n  cal <- which(hp1[,3] == 1);\n  Dal <- which(hp1[,4] == 0);\n  dal <- which(hp1[,4] == 1);\n  \n  hp1[Aal, 1] <- \"A\";\n  hp1[aal, 1] <- \"a\";\n  hp1[Bal, 2] <- \"B\";\n  hp1[bal, 2] <- \"b\";\n  hp1[Cal, 3] <- \"C\";\n  hp1[cal, 3] <- \"c\";\n  hp1[Dal, 4] <- \"D\";\n  hp1[dal, 4] <- \"d\";\n  \n  Aal <- which(hp2[,1] == 0);\n  aal <- which(hp2[,1] == 1);\n  Bal <- which(hp2[,2] == 0);\n  bal <- which(hp2[,2] == 1);\n  Cal <- which(hp2[,3] == 0);\n  cal <- which(hp2[,3] == 1);\n  Dal <- which(hp2[,4] == 0);\n  dal <- which(hp2[,4] == 1);\n  \n  hp2[Aal, 1] <- \"A\";\n  hp2[aal, 1] <- \"a\";\n  hp2[Bal, 2] <- \"B\";\n  hp2[bal, 2] <- \"b\";\n  hp2[Cal, 3] <- \"C\";\n  hp2[cal, 3] <- \"c\";\n  hp2[Dal, 4] <- \"D\";\n  hp2[dal, 4] <- \"d\";\n  \n  Chromosome_1 <- rep(x = NA, times = Nin);\n  Chromosome_2 <- rep(x = NA, times = Nin);\n  \n  for(i in 1:Nin){\n    Chromosome_1[i] <- paste(hp1[i,], collapse = \"\");\n    Chromosome_2[i] <- paste(hp2[i,], collapse = \"\");\n  }  \n  \n  return(list(Chromosome_1, Chromosome_2));\n  \n}\n\nget_DD <- function(Chr1, Chr2, Lnk, NN){\n  ln1  <- Lnk[1];\n  ln2  <- Lnk[2];\n  Haps <- rbind(Chr1, Chr2);\n  g00  <- sum(Haps[, ln1] == 0 & Haps[, ln2] == 0) / (2 * NN);\n  g01  <- sum(Haps[, ln1] == 0 & Haps[, ln2] == 1) / (2 * NN);\n  g10  <- sum(Haps[, ln1] == 1 & Haps[, ln2] == 0) / (2 * NN);\n  g11  <- sum(Haps[, ln1] == 1 & Haps[, ln2] == 1) / (2 * NN);\n  DD   <- (g00*g11) - (g01*g10);\n  return(DD);\n}\n\n\ninitialise_inds <- function(NN = 20, Lnk = 1:2){\n  FrA <- runif(n = 1, min = 0.4, max = 0.6);\n  Fra <- 1 - FrA;\n  FrB <- runif(n = 1, min = 0.4, max = 0.6);\n  Frb <- 1 - FrB;\n  FrC <- runif(n = 1, min = 0.4, max = 0.6);\n  Frc <- 1 - FrC;\n  FrD <- runif(n = 1, min = 0.4, max = 0.6);\n  Frd <- 1 - FrD;\n  MTT <- matrix(data = 0, nrow = NN, ncol = 8);\n  for(i in 1:NN){\n    samp_A    <- rbinom(n = 1, size = 1, prob = FrA);\n    samp_B    <- rbinom(n = 1, size = 1, prob = FrB);\n    samp_C    <- rbinom(n = 1, size = 1, prob = FrC);\n    samp_D    <- rbinom(n = 1, size = 1, prob = FrD);\n    MTT[i, 1] <- samp_A;\n    MTT[i, 2] <- 1 - samp_A;\n    MTT[i, 3] <- samp_B;\n    MTT[i, 4] <- 1 - samp_B;\n    MTT[i, 5] <- samp_C;\n    MTT[i, 6] <- 1 - samp_C; \n    MTT[i, 7] <- samp_D;\n    MTT[i, 8] <- 1 - samp_D;\n  }\n  ## Nevermind, do it this way\n  half_len <- floor(NN / 2);\n  all_vals <- c(rep(x = 0, times = half_len), rep(x = 1, times = half_len));\n  for(i in 1:8){\n    MTT[,i] <- sample(x = all_vals, size = NN, replace = FALSE);\n  }\n  \n  ###\n  ln1  <- Lnk[1];\n  ln2  <- Lnk[2];\n  pos1 <- (2 * ln1) - 1;\n  pos2 <- (2 * ln2) - 1;\n  tbl1 <- table(MTT[, pos1])\n  tbl2 <- table(MTT[, pos2])\n  mxn1 <- names(which(tbl1 == max(tbl1))[1]);\n  mxn2 <- names(which(tbl2 == max(tbl2))[1]);\n  mxv1 <- as.numeric(mxn1);\n  mxv2 <- as.numeric(mxn2);\n  tms1 <- as.numeric(tbl1[mxv1 + 1]);\n  tms2 <- as.numeric(tbl2[mxv2 + 1]);\n  \n  new1         <- rep(x = (mxv1 - 1)*(mxv1 - 1), times = NN); \n  new1[1:tms1] <- mxv1;\n  new2         <- rep(x = (mxv2 - 1)*(mxv2 - 1), times = NN);\n  new2[1:tms2] <- mxv2;\n  \n  MTT[, pos1] <- new1;\n  MTT[, pos2] <- new2;\n  \n  for(i in 1:NN){\n    MTT[i, pos1 + 1] <- 0;\n    if(MTT[i, pos1] == 0){\n      MTT[i, pos1 + 1] <- 1;\n    }\n    MTT[i, pos2 + 1] <- 0;\n    if(MTT[i, pos2] == 0){\n      MTT[i, pos2 + 1] <- 1;\n    }\n  }\n  \n  Chr1 <- MTT[, c(1, 3, 5, 7)];\n  Chr2 <- MTT[, c(2, 4, 6, 8)];\n  \n  DD   <- get_DD(Chr1, Chr2, Lnk, NN);\n  \n  Crms <- make_chromosomes(Chr1, Chr2);\n  \n  Cha1 <- Crms[[1]];\n  Cha2 <- Crms[[2]];\n  \n  return(list(Lnk, MTT, Chr1, Chr2, Cha1, Cha2, DD));\n}\n\nswap_N_Cs <- function(NN, rval, N_C1, N_C2, Lnk){\n  swaps                <- floor(NN * rval);\n  swapit               <- sample(x = 1:NN, size = swaps, replace = FALSE);\n  tmp_C1               <- N_C1[swapit, Lnk[1]];\n  N_C1[swapit, Lnk[2]] <- N_C2[swapit, Lnk[2]];\n  N_C2[swapit, Lnk[2]] <- tmp_C1;\n  return(list(N_C1, N_C2));\n}\n\nmake_new <- function(Lnk, NN, rval, Chr1, Chr2, N_C1, N_C2){\n  Ulnk <- which(1:4 %in% Lnk == FALSE);\n  for(i in 1:NN){\n    parents    <- sample(x = 1:NN, size = 2, replace = FALSE);\n    for(j in Ulnk){\n      p_start <- sample(x = 1:4, size = 1, replace = FALSE);\n      if(p_start == 1){\n        N_C1[i, j] <- Chr1[parents[1], j];\n        N_C2[i, j] <- Chr1[parents[2], j];\n      }\n      if(p_start == 2){\n        N_C1[i, j] <- Chr1[parents[1], j];\n        N_C2[i, j] <- Chr2[parents[2], j];\n      }\n      if(p_start == 3){\n        N_C1[i, j] <- Chr2[parents[1], j];\n        N_C2[i, j] <- Chr1[parents[2], j];\n      }\n      if(p_start == 4){\n        N_C1[i, j] <- Chr2[parents[1], j];\n        N_C2[i, j] <- Chr2[parents[2], j];\n      }\n    }\n    \n    p_start <- sample(x = 1:4, size = 1, replace = FALSE);\n    if(p_start == 1){\n      N_C1[i, Lnk] <- Chr1[parents[1], Lnk];\n      N_C2[i, Lnk] <- Chr1[parents[2], Lnk];\n    }\n    if(p_start == 2){\n      N_C1[i, Lnk] <- Chr1[parents[1], Lnk];\n      N_C2[i, Lnk] <- Chr2[parents[2], Lnk];\n    }\n    if(p_start == 3){\n      N_C1[i, Lnk] <- Chr2[parents[1], Lnk];\n      N_C2[i, Lnk] <- Chr1[parents[2], Lnk];\n    }\n    if(p_start == 4){\n      N_C1[i, Lnk] <- Chr2[parents[1], Lnk];\n      N_C2[i, Lnk] <- Chr2[parents[2], Lnk];\n    }  \n    \n  }\n  recomb_NCs <- swap_N_Cs(NN, rval, N_C1, N_C2, Lnk);\n  return(list(recomb_NCs[[1]], recomb_NCs[[2]]));\n}\n\nchromsome_table <- function(CHR){\n  \n  CHR_tabl  <- table(CHR);\n  \n  chr_names <- c(\"ABCD\", \"ABCd\", \"ABcD\", \"ABcd\", \"AbCD\", \n                 \"AbCd\", \"AbcD\", \"Abcd\", \"aBCD\", \"aBCd\", \"aBcD\", \n                 \"aBcd\", \"abCD\", \"abCd\", \"abcD\", \"abcd\");\n  \n  CHR_head  <- names(CHR_tabl);\n  CHR_N     <- length(CHR_head);\n  \n  full_tbl  <- rep(x = 0, times = length(chr_names));\n  \n  for(i in 1:CHR_N){\n    loc           <- which(chr_names == CHR_head[i]);\n    full_tbl[loc] <-as.numeric(CHR_tabl[i]);\n  }\n  names(full_tbl) <- chr_names;\n  \n  return(full_tbl);\n}\n\nget_gens <- function(StudentID, tmax = 20, NN = 500, rs = 0.2){\n  \n  set.seed(StudentID);\n  \n  rval      <- rs; \n  Lnk       <- sample(x = 1:4, size = 2, replace = FALSE);\n  \n  ini       <- initialise_inds(NN = NN, Lnk = Lnk);\n  N_C1      <- ini[[3]];\n  N_C2      <- ini[[4]];\n  \n  CHR       <- NULL;\n  DD        <- NULL;\n  CTB       <- NULL;\n  RST       <- NULL;\n  CHR[[1]]  <- c(ini[[5]], ini[[6]]);\n  DD[[1]]   <- ini[[7]][[1]];\n  CTB[[1]]  <- chromsome_table(CHR[[1]]);\n  RST[[1]]  <- NA;\n  \n  ts   <- 1;\n  while(ts < tmax){\n    chrs      <- make_new(Lnk = Lnk, NN = NN, rval = rval, \n                          Chr1 = N_C1, Chr2 = N_C2, N_C1 = N_C1,\n                          N_C2 = N_C2);\n    N_C1      <- chrs[[1]];\n    N_C2      <- chrs[[2]];\n    CCC       <- make_chromosomes(N_C1, N_C2);\n    ts        <- ts + 1;\n    \n    DD[[ts]]  <- get_DD(N_C1, N_C2, Lnk, NN);\n    CHR[[ts]] <- c(CCC[[1]], CCC[[2]]);  \n    CTB[[ts]] <- chromsome_table(CHR[[ts]]);\n    RST[[ts]] <- 1 - (DD[[ts]] / DD[[ts - 1]]);\n  }\n  return(list(DD = DD, CHR = CHR, CTB = CTB, RST = RST));  \n}\n\n# Function to draw a simple fish with flipped tail\ndraw_fish <- function(x, y, size = 1, label, count) {\n  # Fish body (circle) - made larger\n  grid.circle(x = x, y = y, r = 0.04 * size,\n              gp = gpar(fill = \"lightblue\", col = \"black\"))\n  \n  # Fish tail (triangle flipped horizontally - wide part at back)\n  x_tail <- c(x + 0.03 * size, x + 0.06 * size, x + 0.03 * size)\n  y_tail <- c(y - 0.025 * size, y, y + 0.025 * size)\n  grid.polygon(x_tail, y_tail, gp = gpar(fill = \"orange\", col = \"black\"))\n  \n  # Fish eye\n  grid.circle(x = x - 0.02 * size, y = y + 0.02 * size, r = 0.007 * size,\n              gp = gpar(fill = \"black\"))\n  \n  # Label inside fish - larger font\n  grid.text(label, x = x, y = y, gp = gpar(fontsize = 12, fontface = \"bold\"))\n  \n  # Count below fish - larger font\n  grid.text(count, x = x, y = y - 0.05 * size, gp = gpar(fontsize = 11))\n}\n\n# Define UI\nui <- fluidPage(\n  titlePanel(\"Genetic Linkage Simulation - Fish Display\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"studentID\", \"Student ID (7 digits):\", \n                   value = 1234567, min = 1000000, max = 9999999),\n      helpText(\"Please enter exactly 7 digits\"),\n      br(),\n      actionButton(\"initBtn\", \"Initialise Simulation\"),\n      actionButton(\"nextBtn\", \"Next Generation\"),\n      actionButton(\"resetBtn\", \"Reset\"),\n      br(), br(),\n      textOutput(\"genCounter\"),\n      textOutput(\"warningMsg\"),\n      br(),\n      helpText(\"Instructions:\"),\n      helpText(\"1. Enter your 7-digit Student ID\"),\n      helpText(\"2. Click 'Initialise Simulation' to start\"),\n      helpText(\"3. Click 'Next Generation' to advance (max 10 generations)\"),\n      helpText(\"4. Click 'Reset' to go back to generation 1\")\n    ),\n    mainPanel(\n      plotOutput(\"fishPlot\", height = \"600px\")\n    )\n  )\n)\n\n# Define server logic\nserver <- function(input, output, session) {\n  \n  # Reactive values to store simulation state\n  sim_data <- reactiveValues(\n    results = NULL,\n    current_gen = 2,  # Start at generation 2 in code\n    max_gen = 11,     # Up to generation 11 in code\n    initialized = FALSE\n  )\n  \n  # Warning message for invalid Student ID\n  output$warningMsg <- renderText({\n    student_id <- as.character(input$studentID)\n    if (nchar(student_id) != 7) {\n      return(\"Warning: Student ID must be exactly 7 digits!\")\n    }\n    return(\"\")\n  })\n  \n  # Generation counter (showing one less than actual)\n  output$genCounter <- renderText({\n    if (sim_data$initialized) {\n      display_gen <- sim_data$current_gen - 1\n      return(paste(\"Current Generation:\", display_gen))\n    } else {\n      return(\"Simulation not initialized\")\n    }\n  })\n  \n  # Initialize simulation\n  observeEvent(input$initBtn, {\n    student_id <- as.character(input$studentID)\n    \n    if (nchar(student_id) != 7) {\n      showModal(modalDialog(\n        title = \"Invalid Student ID\",\n        \"Please enter exactly 7 digits for Student ID.\",\n        easyClose = TRUE\n      ))\n      return()\n    }\n    \n    # Convert to numeric for the seed\n    numeric_id <- as.numeric(student_id)\n    \n    withProgress(message = 'Initializing simulation...', value = 0, {\n      # Run simulation with default parameters\n      sim_data$results <- get_gens(\n        StudentID = numeric_id,\n        tmax = 12,  # We need up to generation 12 (index 2-12)\n        NN = 500,\n        rs = 0.2\n      )\n      sim_data$current_gen <- 2  # Start at generation 2 in code\n      sim_data$initialized <- TRUE\n    })\n  })\n  \n  # Next generation\n  observeEvent(input$nextBtn, {\n    if (!sim_data$initialized) {\n      showModal(modalDialog(\n        title = \"Simulation Not Initialized\",\n        \"Please initialize the simulation first.\",\n        easyClose = TRUE\n      ))\n      return()\n    }\n    \n    if (sim_data$current_gen < sim_data$max_gen) {\n      sim_data$current_gen <- sim_data$current_gen + 1\n    } else {\n      showModal(modalDialog(\n        title = \"Maximum Generation Reached\",\n        \"You have reached the maximum of 10 generations. Click 'Reset' to start over.\",\n        easyClose = TRUE\n      ))\n    }\n  })\n  \n  # Reset to generation 2 in code (display as generation 1)\n  observeEvent(input$resetBtn, {\n    if (sim_data$initialized) {\n      sim_data$current_gen <- 2\n    }\n  })\n  \n  # Fish plot\n  output$fishPlot <- renderPlot({\n    if (!sim_data$initialized) {\n      # Show empty plot with instructions\n      grid.newpage()\n      grid.text(\"Please initialize the simulation to see the fish display\", \n                x = 0.5, y = 0.5, gp = gpar(fontsize = 16))\n      return()\n    }\n    \n    # Get current generation CTB data\n    current_ctb <- sim_data$results$CTB[[sim_data$current_gen]]\n    \n    # Create 4x4 grid for 16 fish\n    grid.newpage()\n    \n    # Define positions for 16 fish in a 4x4 grid\n    x_pos <- rep(seq(0.2, 0.8, length.out = 4), each = 4)\n    y_pos <- rep(seq(0.8, 0.2, length.out = 4), times = 4)\n    \n    # Draw all 16 fish with larger size\n    for (i in 1:16) {\n      chromosome_type <- names(current_ctb)[i]\n      count <- current_ctb[i]\n      draw_fish(x_pos[i], y_pos[i], size = 1.3, label = chromosome_type, count = count)\n    }\n    \n    # Add title with generation info (showing one less than actual)\n    display_gen <- sim_data$current_gen - 1\n    grid.text(paste(\"Generation\", display_gen, \"- Chromosome Frequencies\"),\n              x = 0.5, y = 0.95, gp = gpar(fontsize = 16, fontface = \"bold\"))\n  })\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)","type":"text"}]
