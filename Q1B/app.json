[{"name":"server.R","content":"library(shiny)\n\nsource(\"sunflowers.R\");\n\n# Server\nserver <- function(input, output, session) {\n  # Reactive values\n  values <- reactiveValues(\n    data = NULL,\n    parent_sizes = NULL,\n    selected_parents = c(),\n    current_offspring = NULL,\n    current_parents = NULL,\n    mean_parent_size = NULL\n  )\n  \n  # Validation for 7-digit student ID\n  output$validation_message <- renderUI({\n    student_id <- input$student_id\n    if(!is.na(student_id) && (student_id < 1000000 || student_id > 9999999)) {\n      div(style = \"color: red; font-weight: bold;\",\n          \"Please enter a valid 7-digit Student ID\")\n    }\n  })\n  \n  # Generate data when button is clicked\n  observeEvent(input$generate, {\n    student_id <- input$student_id\n    if(is.na(student_id) || student_id < 1000000 || student_id > 9999999) {\n      showModal(modalDialog(\n        title = \"Invalid Student ID\",\n        \"Please enter a valid 7-digit Student ID\",\n        easyClose = TRUE\n      ))\n      return()\n    }\n    \n    result <- get_inds(student_id)\n    values$data <- result$data\n    \n    # Extract unique parent sizes\n    values$parent_sizes <- data.frame(\n      id = 1:12,\n      size = sapply(1:12, function(i) {\n        # Find first occurrence of this parent to get their size\n        row_idx <- which(values$data[,1] == i | values$data[,2] == i)[1]\n        if(values$data[row_idx, 1] == i) {\n          values$data[row_idx, 3]\n        } else {\n          values$data[row_idx, 4]\n        }\n      })\n    )\n    \n    # Calculate mean parent size\n    values$mean_parent_size <- round(mean(values$parent_sizes$size), 2)\n    \n    values$selected_parents <- c()\n  })\n  \n  # Handle flower clicks\n  observeEvent(input$flower_click, {\n    if(is.null(values$parent_sizes)) return()\n    \n    # Convert click coordinates to parent ID (3 rows, 4 columns)\n    x <- input$flower_click$x\n    y <- input$flower_click$y\n    \n    # Define grid positions for 3 rows and 4 columns\n    col_width <- 0.9 / 4\n    row_height <- 0.8 / 3\n    \n    col_pos <- seq(0.05 + col_width/2, 0.95, by = col_width)\n    row_pos <- seq(0.1 + row_height/2, 0.9, by = row_height)\n    \n    # Find which flower was clicked - fixed row calculation\n    col_idx <- which.min(abs(col_pos - x))\n    row_idx <- which.min(abs(row_pos - y))\n    \n    if(length(col_idx) > 0 && length(row_idx) > 0) {\n      # Fixed: Invert row index to match visual layout\n      clicked_id <- ((3 - row_idx) * 4) + col_idx\n      \n      # Only proceed if we found a valid ID\n      if(clicked_id >= 1 && clicked_id <= 12) {\n        if(clicked_id %in% values$selected_parents) {\n          # Deselect if clicked again\n          values$selected_parents <- setdiff(values$selected_parents, clicked_id)\n        } else if(length(values$selected_parents) < 2) {\n          # Select new parent\n          values$selected_parents <- c(values$selected_parents, clicked_id)\n        } else {\n          # Replace first selection\n          values$selected_parents <- c(values$selected_parents[2], clicked_id)\n        }\n        \n        # If we have two parents, find their offspring\n        if(length(values$selected_parents) == 2) {\n          parent1 <- min(values$selected_parents)\n          parent2 <- max(values$selected_parents)\n          \n          # Find the row with this parent pair\n          pair_row <- which(values$data[,1] == parent1 & values$data[,2] == parent2)\n          if(length(pair_row) > 0) {\n            values$current_offspring <- as.numeric(values$data[pair_row, 5:8])\n            values$current_parents <- c(parent1, parent2)\n            \n            # Calculate midparent size (mean of the two parents)\n            parent1_size <- values$parent_sizes$size[parent1]\n            parent2_size <- values$parent_sizes$size[parent2]\n            midparent_size <- round((parent1_size + parent2_size) / 2, 2)\n            \n            # Show offspring modal with midparent size in title\n            showModal(modalDialog(\n              title = paste(\"Offspring of Parent\", parent1, \"and Parent\", parent2, \n                            \"(Midparent height:\", midparent_size, \"cm)\"),\n              plotOutput(\"offspring_plot\", height = \"400px\"),\n              footer = actionButton(\"close_modal\", \"Close\", class = \"btn btn-primary\"),\n              size = \"l\",\n              easyClose = TRUE\n            ))\n          }\n        }\n      }\n    }\n  })\n  \n  # Parent flower plot\n  output$flower_plot <- renderPlot({\n    if(is.null(values$parent_sizes)) {\n      plot(1, 1, type = \"n\", xlim = c(0, 1), ylim = c(0, 1), \n           xlab = \"\", ylab = \"\", axes = FALSE, main = \"Parent Sunflowers\")\n      text(0.5, 0.5, \"Click 'See flowers' to start\", cex = 1.5)\n      return()\n    }\n    \n    # Set up plot area with proper margins\n    par(mar = c(1, 1, 3, 1), bg = \"white\")\n    plot(1, 1, type = \"n\", xlim = c(0, 1), ylim = c(0, 1), \n         xlab = \"\", ylab = \"\", axes = FALSE, \n         main = paste(\"Mean Parent Height:\", values$mean_parent_size, \"cm\"))\n    \n    # Add subtitle with instructions - moved down\n    mtext(\"Click any two parent sunflowers to see their offspring\", side = 3, line = -0.5, cex = 0.9)\n    \n    # Define grid positions for 3 rows and 4 columns\n    col_width <- 0.9 / 4\n    row_height <- 0.8 / 3\n    \n    # Draw 12 sunflowers in a 3x4 grid\n    for(i in 1:12) {\n      row <- ((i - 1) %/% 4) + 1  # Row: 1,1,1,1,2,2,2,2,3,3,3,3\n      col <- ((i - 1) %% 4) + 1   # Column: 1,2,3,4,1,2,3,4,1,2,3,4\n      \n      x_pos <- 0.05 + (col - 0.5) * col_width\n      y_pos <- 0.9 - (row - 0.5) * row_height\n      \n      selected <- i %in% values$selected_parents\n      draw_sunflower(x_pos, y_pos, values$parent_sizes$size[i], i, selected)\n    }\n  })\n  \n  # Offspring plot for modal\n  output$offspring_plot <- renderPlot({\n    if(is.null(values$current_offspring)) return()\n    \n    # Calculate mean offspring size\n    mean_offspring <- round(mean(values$current_offspring), 2)\n    \n    # Set up plot area with proper aspect ratio\n    par(mar = c(2, 2, 2, 2), bg = \"white\", pty = \"s\")\n    plot(1, 1, type = \"n\", xlim = c(0, 1), ylim = c(0, 1), \n         xlab = \"\", ylab = \"\", axes = FALSE, asp = 1,\n         main = paste(\"Offspring Sunflowers\\nMean Height:\", mean_offspring, \"cm\"))\n    \n    # Draw 4 offspring sunflowers in a centered 2x2 grid\n    for(i in 1:4) {\n      row <- ((i - 1) %/% 2) + 1  # Row: 1,1,2,2\n      col <- ((i - 1) %% 2) + 1   # Column: 1,2,1,2\n      \n      x_pos <- 0.25 + (col - 1) * 0.5\n      y_pos <- 0.75 - (row - 1) * 0.5\n      \n      draw_sunflower(x_pos, y_pos, values$current_offspring[i], i, \n                     selected = FALSE, is_offspring = TRUE)\n    }\n  })\n  \n  # Selection info\n  output$selection_info <- renderText({\n    if(is.null(values$selected_parents) || length(values$selected_parents) == 0) {\n      \"No parents selected\"\n    } else if(length(values$selected_parents) == 1) {\n      paste(\"Selected parent:\", values$selected_parents[1])\n    } else {\n      paste(\"Selected parents:\", values$selected_parents[1], \"and\", values$selected_parents[2])\n    }\n  })\n  \n  # Close modal and reset selection\n  observeEvent(input$close_modal, {\n    # Reset selected parents when modal is closed\n    values$selected_parents <- c()\n    removeModal()\n  })\n}","type":"text"},{"name":"ui.R","content":"library(shiny)\n\nsource(\"sunflowers.R\");\n\n# UI\nui <- fluidPage(\n  titlePanel(\"Quantitative Genetics: Parent-Offspring Inheritance\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"student_id\", \"Enter your 7-digit Student ID:\", \n                   value = 0, min = 1000000, max = 9999999),\n      actionButton(\"generate\", \"See flowers\"),\n      br(), br(),\n      helpText(\"Click two parent flowers to see their offspring\"),\n      helpText(\"Selected parents will be highlighted in red\"),\n      verbatimTextOutput(\"selection_info\"),\n      uiOutput(\"validation_message\")\n    ),\n    mainPanel(\n      plotOutput(\"flower_plot\", click = \"flower_click\", height = \"600px\")\n    )\n  )\n)","type":"text"},{"name":"get_inds.R","content":"get_inds <- function(StudentID){\n  set.seed(StudentID)\n  NN <- 12;\n  ON <- 4;\n  mn <- 40;\n  sg <- 6;\n  sz <- round(rnorm(n = NN, mean = mn, sd = sg), digits = 2);\n  h2 <- runif(n = 1, min = 0.4, max = 0.95);\n  om <- mean(sz); \n\n  dat <- NULL;\n  for(i in 1:NN){\n    for(j in 1:NN){\n      if(i < j){\n        mpp <- (0.5 * (sz[i] + sz[j]) ) - om;\n        prr <- om + (h2 * mpp);\n        off <- round(rnorm(n = 4, mean = prr, sd = 2), digits = 2);\n        drw <- c(i, j, sz[i], sz[j], off);\n        dat <- rbind(dat, drw);\n      }\n    }\n  }\n\n  colnames(dat) <- c(\"Parent_1\", \"Parent_2\", \"Parent_1_size\", \n                     \"Parent_2_size\", \"Offspring_1_size\",\n                     \"Offspring_2_size\", \"Offspring_3_size\",\n                     \"Offspring_4_size\");\n  rownames(dat) <- NULL;\n  \n  midparent <- apply(X = dat[,3:4], MARGIN = 1, FUN = mean);\n  offspring <- apply(X = dat[,5:8], MARGIN = 1, FUN = mean);\n  mod       <- lm(offspring ~ midparent);\n  reg_int   <- as.numeric(mod$coefficients[1]);\n  h2_est    <- as.numeric(mod$coefficients[2]);\n  return(list(data = dat, h2_est = h2_est, h2_true = h2, reg_int = reg_int));\n}\n\n\n\n\n","type":"text"},{"name":"sunflowers.R","content":"library(shiny)\n\n# Your provided function\nget_inds <- function(StudentID){\n  set.seed(StudentID)\n  NN <- 12;\n  ON <- 4;\n  mn <- 40;\n  sg <- 6;\n  sz <- round(rnorm(n = NN, mean = mn, sd = sg), digits = 2);\n  h2 <- runif(n = 1, min = 0.4, max = 0.95);\n  om <- mean(sz); \n  \n  dat <- NULL;\n  for(i in 1:NN){\n    for(j in 1:NN){\n      if(i < j){\n        mpp <- (0.5 * (sz[i] + sz[j]) ) - om;\n        prr <- om + (h2 * mpp);\n        off <- round(rnorm(n = 4, mean = prr, sd = 2), digits = 2);\n        drw <- c(i, j, sz[i], sz[j], off);\n        dat <- rbind(dat, drw);\n      }\n    }\n  }\n  \n  colnames(dat) <- c(\"Parent_1\", \"Parent_2\", \"Parent_1_size\", \n                     \"Parent_2_size\", \"Offspring_1_size\",\n                     \"Offspring_2_size\", \"Offspring_3_size\",\n                     \"Offspring_4_size\");\n  rownames(dat) <- NULL;\n  \n  midparent <- apply(X = dat[,3:4], MARGIN = 1, FUN = mean);\n  offspring <- apply(X = dat[,5:8], MARGIN = 1, FUN = mean);\n  mod       <- lm(offspring ~ midparent);\n  reg_int   <- as.numeric(mod$coefficients[1]);\n  h2_est    <- as.numeric(mod$coefficients[2]);\n  return(list(data = dat, h2_est = h2_est, h2_true = h2, reg_int = reg_int));\n}\n\n# Improved sunflower drawing function\ndraw_sunflower <- function(x, y, size, label, selected = FALSE, is_offspring = FALSE) {\n  # Scale size for visualization\n  scale_factor <- 0.2 + (size / 100)\n  radius <- ifelse(is_offspring, 0.06 * scale_factor, 0.05 * scale_factor)\n  \n  # Draw stem for all flowers\n  stem_length <- ifelse(is_offspring, 0.06, 0.08)\n  segments(x, y - radius - 0.02, x, y - radius - stem_length, col = \"darkgreen\", lwd = 4)\n  \n  # Draw oval-shaped petals radiating outward\n  n_petals <- 14\n  for(i in 1:n_petals) {\n    angle <- 2 * pi * i / n_petals\n    \n    # Calculate petal positions - adjust for offspring\n    inner_radius <- ifelse(is_offspring, 0.4, 0.4)  # Bigger inner radius for larger center\n    outer_radius <- ifelse(is_offspring, 1.8, 1.6)  # Bigger petals for offspring\n    \n    inner_x <- x + cos(angle) * radius * inner_radius\n    inner_y <- y + sin(angle) * radius * inner_radius\n    outer_x <- x + cos(angle) * radius * outer_radius\n    outer_y <- y + sin(angle) * radius * outer_radius\n    \n    # Draw petal as an oval\n    width <- radius * 0.4\n    perp_angle <- angle + pi/2\n    \n    # Create oval shape\n    oval_points_x <- c(\n      inner_x + cos(perp_angle) * width,\n      outer_x + cos(perp_angle) * width,\n      outer_x - cos(perp_angle) * width,\n      inner_x - cos(perp_angle) * width\n    )\n    \n    oval_points_y <- c(\n      inner_y + sin(perp_angle) * width,\n      outer_y + sin(perp_angle) * width,\n      outer_y - sin(perp_angle) * width,\n      inner_y - sin(perp_angle) * width\n    )\n    \n    # Draw the petal\n    polygon(oval_points_x, oval_points_y, col = \"yellow\", border = \"goldenrod\", lwd = 1)\n  }\n  \n  # Draw flower center - larger brown center for parents\n  center_size <- ifelse(is_offspring, radius * 100, radius * 120)  # Bigger for parents\n  points(x, y, pch = 21, bg = \"#8B4513\", col = \"black\", cex = center_size, lwd = 2)\n  \n  # Add center dots for texture\n  points(x, y, pch = 16, col = \"#5D4037\", cex = center_size * 0.3)\n  \n  # Highlight if selected\n  if(selected) {\n    symbols(x, y, circles = radius * 2.2, inches = FALSE, \n            add = TRUE, fg = \"red\", lwd = 3)\n  }\n  \n  # Label with ID and size\n  if (is_offspring) {\n    # For offspring: only show size, positioned lower\n    text(x, y - radius - stem_length - 0.04,  # Moved down more\n         label = paste0(size, \" cm\"), \n         cex = 1.3, col = \"darkblue\", font = 2)\n  } else {\n    # For parents: show ID and size\n    text(x, y - radius - stem_length - 0.04,\n         label = paste0(\"ID: \", label, \"\\n\", size, \" cm\"), \n         cex = 1.1, col = \"darkblue\", font = 2)\n  }\n}\n","type":"text"}]
